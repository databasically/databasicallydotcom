<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-06-23T16:31:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>All the Little Things</title>
    <link rel="alternate" href="/2014/06/23/all-the-little-things/"/>
    <id>/2014/06/23/all-the-little-things/</id>
    <published>2014-06-23T16:31:00Z</published>
    <updated>2014-06-23T16:31:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="all-the-little-things"&gt;All the Little Things&lt;/h1&gt;

&lt;iframe width="853" height="480" src="//www.youtube-nocookie.com/embed/8bZh5LMaSmE" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;hr /&gt;
&lt;p&gt;      At RailsConf 2014, Sandi Metz delivered a talk over refactoring complex chunks of code. She praised the value of breaking large pieces of code in to smaller, more digestible pieces. Metz used the &lt;a href="https://github.com/professor/GildedRose"&gt;gilded rose kata&lt;/a&gt; as an example of complex code to break down and simplify. In her talk, Metz broke down the giant conditional presented in the gilded rose into much smaller pieces. Through this, she created simpler, more maintainable, and more extensible code.&lt;/p&gt;

&lt;p&gt;      Metz began her talk promising her listeners that if they would make smaller things, they would write better code. She then introduced the gilded rose kata and her goal of adding the functionality for 'conjured' items. The issue was that the conditional in the &lt;code&gt;tick&lt;/code&gt; method was too complex to easily add any behavior. Before adding any functionality, Metz opted to refactor the given code. She began refactoring by breaking each part of the large conditional into separate methods. She then created objects to cover the functionality of those methods. By breaking the functionality of &lt;code&gt;GildedRose&lt;/code&gt; into small objects, Metz simplified the code base. &lt;code&gt;GildedRose&lt;/code&gt; was no longer a giant class, but a simple object factory. All Metz had to do to add &lt;code&gt;Conjured&lt;/code&gt; was to create the &lt;code&gt;Conjured&lt;/code&gt; class and add it to a hash in &lt;code&gt;GildedRose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Throughout her talk, Metz made five few key points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;"Make Smaller Things"&lt;br /&gt;
Writing small objects and small methods leads to maintainable, flexible, and understandable code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;"Refactor Under Green; reach for the lowest hanging green."&lt;br /&gt;
Ensuring tests pass before refactoring can help to prevent changes in behavior after refactoring.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;"Duplication is far cheaper than the wrong abstraction"&lt;br /&gt;
While duplication isn't great, writing the wrong abstraction can be expensive. When refactoring, don't get caught up on tangents and write unnecessary abstractions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;"Inheritance is not evil"&lt;br /&gt;
Many people get a bad impression about inheritance from seeing it used the wrong way. But, as Metz suggests, inheritance can be the perfect tool when used properly. The key is to keep it simple. As Metz put it, keep inheritance trees shallow and narrow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;"Reach for Open/Closed"&lt;br /&gt;
Adding behavior should not require editing existing code. This is a concept many people have trouble applying in practice. Yet, when following the other principles of SOLID design and the advice given by Metz, it is doable. Doing so will, in the long run, save time and effort that one would spend combating complexity when making changes later on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;      I see examples throughout my old code that could benefit from Metz's advice. Too many large objects and methods. Objects that know too much about other objects and their environment. Shirking away from inheritence wherever possible. Having to edit old code to introduce new behavior.&lt;/p&gt;

&lt;p&gt;      Metz's talk changed the way I look at complexity in code structure. I'm guilty of falling into the trap of thinking that creating more objects leads to more complex code. But, based on Metz's talk, creating more, smaller objects and methods is the simpler way to structure code.&lt;/p&gt;

&lt;p&gt;– Nick Fausnight&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Converting a GitHub Issue to a Pull Request</title>
    <link rel="alternate" href="/2014/05/13/converting-a-github-issue-to-a-pull-request/"/>
    <id>/2014/05/13/converting-a-github-issue-to-a-pull-request/</id>
    <published>2014-05-13T00:00:00Z</published>
    <updated>2014-05-13T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;When I started using GitHub Issues on my projects, I wanted group commits for a project together.  Originally, I would make a new branch for my work and use &lt;code&gt;refs #issuenum&lt;/code&gt; in my commit messages to link the commits to an issue. But, sometimes I would forget to link a commit and then it would be lost in limbo.  Teammates could use the branch comparison view to review changes, but it wasn't an ideal place to have a conversation about a feature or fix.&lt;/p&gt;

&lt;p&gt;Instead, GitHub already has a construct for this: the pull request.  So, for a while when I started to work on something, I actually &lt;b&gt;closed&lt;/b&gt; the original issue and started a brand new pull request.&lt;/p&gt;

&lt;p&gt;There &lt;i&gt;had&lt;/i&gt; to be a better way.&lt;/p&gt;

&lt;h3&gt;The Solution&lt;/h3&gt;
&lt;p&gt;I found that the API allows converting an issue to a pull request. There's no corresponding UI control on the GitHub website, so I needed a way to activate this functionality.&lt;/p&gt;

&lt;p&gt;
  Now, my typical workflow for features is this:
  &lt;ul&gt;
    &lt;li&gt;Client asks for something.&lt;/li&gt;
    &lt;li&gt;I file an issue on GitHub so I don't forget it.&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;time passes&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt;The issue is next to be done, so I start a new branch and start working.&lt;/li&gt;
    &lt;li&gt;After a couple of commits, I push my branch and I'm ready for a pull request.&lt;/li&gt;
    &lt;li&gt;I run this little program, which asks me some questions, and it promotes my issue to a pull request and links it to my branch.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;h3&gt;Code&lt;/h3&gt;

&lt;pre class="highlight shell"&gt;
&lt;span class="c"&gt;#!/usr/bin/env ruby&lt;/span&gt;
require &lt;span class="s1"&gt;'io/console'&lt;/span&gt;

ORG &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'your-organization-name'&lt;/span&gt;
REPO &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'your-repository-name'&lt;/span&gt;
USER &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'your-github-login-name'&lt;/span&gt;
puts  &lt;span class="s2"&gt;&amp;quot;Converting a GitHub issue to a pull request for #{ORG}/#{REPO}&amp;quot;&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;What issue number: &amp;quot;&lt;/span&gt;
issue_num &lt;span class="o"&gt;=&lt;/span&gt; gets.chomp

print &lt;span class="s2"&gt;&amp;quot;What branch to start from (master or staging, maybe?): &amp;quot;&lt;/span&gt;
start_branch &lt;span class="o"&gt;=&lt;/span&gt; gets.chomp

print &lt;span class="s2"&gt;&amp;quot;What branch to pull from (must be pushed already): &amp;quot;&lt;/span&gt;
end_branch &lt;span class="o"&gt;=&lt;/span&gt; gets.chomp

print &lt;span class="s2"&gt;&amp;quot;Enter GitHub password: &amp;quot;&lt;/span&gt;
userpass &lt;span class="o"&gt;=&lt;/span&gt; STDIN.noecho&lt;span class="o"&gt;(&lt;/span&gt;&amp;amp;:gets&lt;span class="o"&gt;)&lt;/span&gt;.chomp

&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; %Q&lt;span class="o"&gt;(&lt;/span&gt;
  curl --user &lt;span class="s2"&gt;&amp;quot;#{USER}:#{userpass}&amp;quot;&lt;/span&gt;
       --silent
       --request POST
       --data &lt;span class="s1"&gt;'{&amp;quot;issue&amp;quot;: &amp;quot;#{issue_num}&amp;quot;,
          &amp;quot;head&amp;quot;: &amp;quot;#{ORG}:#{end_branch}&amp;quot;,
          &amp;quot;base&amp;quot;: &amp;quot;#{start_branch}&amp;quot;}'&lt;/span&gt;
       https://api.github.com/repos/#&lt;span class="o"&gt;{&lt;/span&gt;ORG&lt;span class="o"&gt;}&lt;/span&gt;/#&lt;span class="o"&gt;{&lt;/span&gt;REPO&lt;span class="o"&gt;}&lt;/span&gt;/pulls
  &lt;span class="o"&gt;)&lt;/span&gt;

puts &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="c"&gt;#{command}`&lt;/span&gt;&lt;/pre&gt;

&lt;h3&gt;Demo (given at KC Ruby)&lt;/h3&gt;

&lt;div style="padding-left:30px"&gt;&lt;iframe width="640" height="480" src="//www.youtube.com/embed/5EA9DGNSUdo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h3&gt;Questions&lt;/h3&gt;
After I gave this talk at KC Ruby, there were a few questions:
&lt;dl&gt;
  &lt;dt&gt;What about the &lt;code&gt;hub&lt;/code&gt; gem?&lt;/dt&gt;
  &lt;dd&gt;It's great! I couldn't get it working easily and this was my major pain point, but I hear that it does really neat things.&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
  &lt;dt&gt;Are pull requests that much better?&lt;/dt&gt;
  &lt;dd&gt;In a nutshell, I like them more because:
    &lt;ul&gt;
      &lt;li&gt;they group commits automatically, since they're based off a branch.&lt;/li&gt;
      &lt;li&gt;commenting on specific lines is much easier, since as additional changes are pushes the comments will reflect that.&lt;/li&gt;
      &lt;li&gt;having all the history grouped together is really helpful in the future when you need to look back wondering why something was done the way it was done!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
&lt;/dl&gt;</content>
  </entry>
  <entry>
    <title>Misleading people with graphs</title>
    <link rel="alternate" href="/2014/01/03/misleading-people-with-graphs/"/>
    <id>/2014/01/03/misleading-people-with-graphs/</id>
    <published>2014-01-03T00:00:00Z</published>
    <updated>2014-01-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;br&gt;&lt;br&gt;
&lt;p&gt;One could read this graph and think "wow, the war on drugs means we are putting more people in jail"&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Helpful visual re: spike in incarceration after the declared &amp;quot;war on drugs&amp;quot; &lt;a href="http://t.co/uTWpzr4Kuy"&gt;pic.twitter.com/uTWpzr4Kuy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Prison Culture (@prisonculture) &lt;a href="https://twitter.com/prisonculture/statuses/419185019379122176"&gt;January 3, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;


&lt;p&gt;That's true, but it's misleading. Showing absolute numbers for population changes over time don't really tell you anything (unless you actually showing the population change over time!)&lt;/p&gt;

&lt;p&gt;Instead, this should be per capita: what percent of our population was in jail?  That's a much more meaningful statistic because we're interested in the relative change over time, not the absolute change. &lt;/p&gt;

&lt;p&gt;As they say, everything is relative.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>On Writing</title>
    <link rel="alternate" href="/2014/01/01/on-writing/"/>
    <id>/2014/01/01/on-writing/</id>
    <published>2014-01-01T00:00:00Z</published>
    <updated>2014-01-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It's a new year and with that come the flurry of resolutions. This year, we say, I'll go to bed earlier, or go to bed later, or only hit snooze once.  I'll eat better, exercise more, be happier. I'll blog more, I'll write a book. I'll start that project, go on that trip, climb that mountain, lay on that beach.&lt;/p&gt;

&lt;p&gt;For a while, I've wanted to write more. Well, I thought I wanted to write more. Maybe it's that I liked the &lt;i&gt;idea&lt;/i&gt; that I would write more.  Why? To leave a mark. To force myself to actually think about what I believe about a subject and then to be able to explain it well enough to commit it to paper. Smart people say it has a great way to connect with others, and I love the act of storytelling so much that I want to practice it.  I'm not sure, but it's some of these plus something a little deeper that I want to think about.&lt;/p&gt;

&lt;p&gt;While I actually started doing this a little more before the new year, I'm going to step it up. Luckily, I've done very little regular writing so the bar has been set very low.  I'm merely aiming for a post a week, be it technical, something short, or something longer as a response to something else.&lt;/p&gt;

&lt;p&gt;It's like this: A friend of a friend just finished his doctorate, which required that he wrote a thesis. While discussing what he wrote, I asked him about the process of getting it done and his reply fascinated me.  He said he had a rule: he had to write at least one sentence a day.  It didn't matter if he was on vacation, on holiday, sick, drunk, hungover, had an exam, or anything. Every day; one sentence. Some days, it was just that, he put down his sentence.  But invariably, once he wrote one sentence, he would see a part of the outline that needed to be fleshed out, or think about a paragraph he was struggling to write and now he had a better idea of the explanation.  Soon enough, his thesis was ready for review and he scheduled an appointment. When he showed up, no one took him seriously. "No one gets that far so fast, it takes much longer to write a thesis." This surprised him, because he didn't think he'd been particularly fast. Some days, he only wrote one sentence, after all.  But it was the consistency that mattered.&lt;/p&gt;

&lt;p&gt;Another feeling I want to experience is actually finishing and shipping something. Most of the projects I currently work on have no end in sight, they just keep going. So, I want a little bit of working on something, finishing it, and being done with it.&lt;/p&gt;

&lt;p&gt;Naturally, I immediately wanted to start making a page on this site that can show exactly how consistent I am (or not!) However, I want to err on the side of &lt;i&gt;actually finishing&lt;/i&gt; this, so that will have to wait for another day.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Using the Unix 'cal' commmand</title>
    <link rel="alternate" href="/2013/09/16/using-the-unix-cal-command/"/>
    <id>/2013/09/16/using-the-unix-cal-command/</id>
    <published>2013-09-16T00:00:00Z</published>
    <updated>2013-09-16T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Multiple times per day, I pull up a calendar to look at a date.  For example, I might need to find "what day of the week is Sept 1st" or "what was the week ending date of that week."
&lt;/p&gt;
&lt;p&gt;Normally, I pull up the calendar in the OS X Dashboard:
&lt;div class='text-center'&gt;&lt;img src="/images/os-x-dashboard-calendar.png" alt="os x dashboard calendar" &gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This works ok for one month, but scrolling to the past or future isn't quick, and you can't see more than one month.  Plus, it's sometimes hard to tell what month you're looking at or how to get back to the current month.&lt;/p&gt;
&lt;p&gt;Now, I turn to the &lt;code&gt;cal&lt;/code&gt; command, available from *nix command lines.&lt;/p&gt;
&lt;p&gt;
  &lt;h4&gt;Without arguments, &lt;code&gt;cal&lt;/code&gt; shows the current month&lt;/h4&gt;
  &lt;pre&gt;
$ cal
   September 2013
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30
  &lt;/pre&gt;

&lt;/p&gt;

&lt;p&gt;
  &lt;h4&gt;You can pass just a year and &lt;code&gt;cal&lt;/code&gt; shows that year&lt;/h4&gt;
  &lt;h4&gt;&lt;code&gt;cal -y&lt;/code&gt; is a shortcut for the current year&lt;/h4&gt;
  &lt;pre&gt;
$ cal 2013
                             2013

      January               February               March
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
       1  2  3  4  5                  1  2                  1  2
 6  7  8  9 10 11 12   3  4  5  6  7  8  9   3  4  5  6  7  8  9
13 14 15 16 17 18 19  10 11 12 13 14 15 16  10 11 12 13 14 15 16
20 21 22 23 24 25 26  17 18 19 20 21 22 23  17 18 19 20 21 22 23
27 28 29 30 31        24 25 26 27 28        24 25 26 27 28 29 30
                                            31
       April                  May                   June
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6            1  2  3  4                     1
 7  8  9 10 11 12 13   5  6  7  8  9 10 11   2  3  4  5  6  7  8
14 15 16 17 18 19 20  12 13 14 15 16 17 18   9 10 11 12 13 14 15
21 22 23 24 25 26 27  19 20 21 22 23 24 25  16 17 18 19 20 21 22
28 29 30              26 27 28 29 30 31     23 24 25 26 27 28 29
                                            30
        July                 August              September
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6               1  2  3   1  2  3  4  5  6  7
 7  8  9 10 11 12 13   4  5  6  7  8  9 10   8  9 10 11 12 13 14
14 15 16 17 18 19 20  11 12 13 14 15 16 17  15 16 17 18 19 20 21
21 22 23 24 25 26 27  18 19 20 21 22 23 24  22 23 24 25 26 27 28
28 29 30 31           25 26 27 28 29 30 31  29 30

      October               November              December
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa
       1  2  3  4  5                  1  2   1  2  3  4  5  6  7
 6  7  8  9 10 11 12   3  4  5  6  7  8  9   8  9 10 11 12 13 14
13 14 15 16 17 18 19  10 11 12 13 14 15 16  15 16 17 18 19 20 21
20 21 22 23 24 25 26  17 18 19 20 21 22 23  22 23 24 25 26 27 28
27 28 29 30 31        24 25 26 27 28 29 30  29 30 31
  &lt;/pre&gt;

&lt;/p&gt;

&lt;p&gt;
  &lt;h4&gt;Pass [month] [year] and &lt;code&gt;cal&lt;/code&gt; shows just the specified month&lt;/h4&gt;
  &lt;pre&gt;
$ cal 12 2012
   December 2012
Su Mo Tu We Th Fr Sa
                   1
 2  3  4  5  6  7  8
 9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31
&lt;/pre&gt;

&lt;/p&gt;

&lt;p&gt;
  &lt;h4&gt;Or, just &lt;code&gt;cal -m [month]&lt;/code&gt; to default to the current year&lt;/h4&gt;
  &lt;pre&gt;
$ cal -m 12
   December 2013
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30 31
  &lt;/pre&gt;
&lt;/p&gt;


&lt;p&gt;
  &lt;h4&gt;Get days of the year (Julian days) with &lt;code&gt;cal -j [month] [year]&lt;/code&gt;&lt;/h4&gt;
  &lt;pre&gt;
$ cal -j 12 2012
       December 2012
 Su  Mo  Tu  We  Th  Fr  Sa
                        336
337 338 339 340 341 342 343
344 345 346 347 348 349 350
351 352 353 354 355 356 357
358 359 360 361 362 363 364
365 366
  &lt;/pre&gt;
&lt;/p&gt;



&lt;p&gt;The new version of cal is &lt;code&gt;ncal&lt;/code&gt;.  It transposes the calendar (days run down the side) and can feel cramped, but it can fit more across a screen.&lt;/p&gt;

&lt;p&gt;
  &lt;h4&gt;Without arguments, &lt;code&gt;ncal&lt;/code&gt; shows the current month.&lt;/h4&gt;
  &lt;pre&gt;
$ ncal
    September 2013
Mo     2  9 16 23 30
Tu     3 10 17 24
We     4 11 18 25
Th     5 12 19 26
Fr     6 13 20 27
Sa     7 14 21 28
Su  1  8 15 22 29
  &lt;/pre&gt;

&lt;/p&gt;
&lt;p&gt;
  &lt;h4&gt;To show week numbers in the new format, use &lt;code&gt;ncal -w&lt;/code&gt;.&lt;/h4&gt;
  &lt;pre&gt;
$ ncal -yw
                                  2013
    January           February          March             April
Mo     7 14 21 28        4 11 18 25        4 11 18 25     1  8 15 22 29
Tu  1  8 15 22 29        5 12 19 26        5 12 19 26     2  9 16 23 30
We  2  9 16 23 30        6 13 20 27        6 13 20 27     3 10 17 24
Th  3 10 17 24 31        7 14 21 28        7 14 21 28     4 11 18 25
Fr  4 11 18 25        1  8 15 22        1  8 15 22 29     5 12 19 26
Sa  5 12 19 26        2  9 16 23        2  9 16 23 30     6 13 20 27
Su  6 13 20 27        3 10 17 24        3 10 17 24 31     7 14 21 28
    1  2  3  4  5     5  6  7  8  9     9 10 11 12 13    14 15 16 17 18
    May               June              July              August
Mo     6 13 20 27        3 10 17 24     1  8 15 22 29        5 12 19 26
Tu     7 14 21 28        4 11 18 25     2  9 16 23 30        6 13 20 27
We  1  8 15 22 29        5 12 19 26     3 10 17 24 31        7 14 21 28
Th  2  9 16 23 30        6 13 20 27     4 11 18 25        1  8 15 22 29
Fr  3 10 17 24 31        7 14 21 28     5 12 19 26        2  9 16 23 30
Sa  4 11 18 25        1  8 15 22 29     6 13 20 27        3 10 17 24 31
Su  5 12 19 26        2  9 16 23 30     7 14 21 28        4 11 18 25
   18 19 20 21 22    22 23 24 25 26    27 28 29 30 31    31 32 33 34 35
    September         October           November          December
Mo     2  9 16 23 30     7 14 21 28        4 11 18 25        2  9 16 23 30
Tu     3 10 17 24     1  8 15 22 29        5 12 19 26        3 10 17 24 31
We     4 11 18 25     2  9 16 23 30        6 13 20 27        4 11 18 25
Th     5 12 19 26     3 10 17 24 31        7 14 21 28        5 12 19 26
Fr     6 13 20 27     4 11 18 25        1  8 15 22 29        6 13 20 27
Sa     7 14 21 28     5 12 19 26        2  9 16 23 30        7 14 21 28
Su  1  8 15 22 29     6 13 20 27        3 10 17 24        1  8 15 22 29
   35 36 37 38 39 40 40 41 42 43 44    44 45 46 47 48    48 49 50 51 52  1
  &lt;/pre&gt;

&lt;/p&gt;
&lt;p&gt;
  &lt;h4&gt;Finally, calculate the date of Easter with &lt;code&gt;ncal -e&lt;/code&gt;&lt;/h4&gt;
  &lt;pre&gt;
$ ncal -e 2014
April 20 2014
  &lt;/pre&gt;

&lt;/p&gt;
&lt;p&gt;
  You can use &lt;code&gt;man cal&lt;/code&gt; to get more details and examples.
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Recover a dropped stash in git</title>
    <link rel="alternate" href="/2013/08/15/recover-a-dropped-stash-in-git/"/>
    <id>/2013/08/15/recover-a-dropped-stash-in-git/</id>
    <published>2013-08-15T00:00:00Z</published>
    <updated>2013-08-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I was working on a git branch and did a 'git stash save' on some changes, then did a pull, then went to lunch.  When I got back, I fixed something on another branch, then went to 'git stash pop' them.
&lt;/p&gt;

&lt;p&gt;Without thinking, I did a hard reset and wiped them out, but I'd already taken them out of the stash area. Ack!&lt;/p&gt;

&lt;p&gt;I thought about checking to see if it's possible to recover a dropped stash from the reflog, but turns out it was easier than that. I had already run &lt;code&gt;git stash show&lt;/code&gt; earlier and had something like this:

&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git stash pop
&lt;span class="o"&gt;[&lt;/span&gt;...]
Dropped refs/stash@&lt;span class="o"&gt;{&lt;/span&gt;0&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;6ddc4021719ddd8f5e35f5d63e8e04b9ab2c5650&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In this case, I had the SHA of that commit, so a &lt;code&gt;git branch tmp 6ddc4&lt;/code&gt; made a new branch with that commit on the tip of it, and I could move along.&lt;/p&gt;
&lt;p&gt;Naturally, I couldn't stop thinking about this and wondered what I would do if I didn't have the commit around. Could I find it in the reflog?&lt;/p&gt;
&lt;p&gt;Turns out, you can use &lt;code&gt;git fsck&lt;/code&gt; to find 'dangling commits':

&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git fsck --no-reflog | grep &lt;span class="s1"&gt;'dangling commit'&lt;/span&gt; | cut -d &lt;span class="s1"&gt;' '&lt;/span&gt; -f 3
&lt;/pre&gt;
This gave me a list of all commits that weren't referenced anymore. From there, I did &lt;code&gt;git show SHA&lt;/code&gt; on them to find the one I was interested in.
&lt;/p&gt;</content>
  </entry>
</feed>
