---
layout: article
title: ! 'What''s New In Ruby: April 2013 edition'
post_date: 2013-04-23
---
Every month, <a href="http://meetup.com/kcruby">Kansas City Ruby</a> (#kcruby) reviews a subset of Peter Cooper's fantastic <a href="http://rubyweekly.com/?utm_source=databasically">Ruby Weekly</a> selections, along with other items picked up around the web.


<h4><a href="http://shopify.github.io/dashing/" target="_blank">Dashing - 
The exceptionally handsome dashboard framework.</a></h4>
<p>
<blockquote>
Dashing is a Sinatra based framework that lets you build beautiful dashboards.<br><br>

Key features:

<ul>
	<li>Use premade widgets, or fully create your own with scss, html, and coffeescript.</li>
	<li>Widgets harness the power of data bindings to keep things DRY and simple. Powered by batman.js.</li>
	<li>Use the API to push data to your dashboards, or make use of a simple ruby DSL for fetching data.</li>
	<li>Drag & Drop interface for re-arranging your widgets.</li>
	<li>Host your dashboards on Heroku in less than 30 seconds.</li>

</ul>
This project was created at Shopify for displaying custom dashboards on TVs around the office.
</blockquote>
</p>

<h4><a href="http://blog.codeclimate.com/blog/2013/03/27/rails-insecure-defaults/" target="_blank">Rails' Insecure Defaults: 
13 Security Gotchas You Should Know About</a></h4>
<p>
<blockquote>Secure defaults are critical to building secure systems. If a developer must take explicit action to enforce secure behavior, eventually even an experienced developer will forget to do so. For this reason, security experts say:
<br><br>
“Insecure by default is insecure.”
<br><br>
Rails’ reputation as a relatively secure Web framework is well deserved. Out-of-the-box, there is protection against many common attacks: cross site scripting (XSS), cross site request forgery (CSRF) and SQL injection. Core members are knowledgeable and genuinely concerned with security.<br><br>

However, there are places where the default behavior could be more secure. This post explores potential security issues in Rails 3 that are fixed in Rails 4, as well as some that are still risky. I hope this post will help you secure your own apps, as well as inspire changes to Rails itself.</blockquote>
</p>

<h4><a href="http://patshaughnessy.net/2013/4/3/ruby-2-0-works-hard-so-you-can-be-lazy" target="_blank">Ruby 2.0 Works Hard So You Can Be Lazy</a></h4>
<p>
<blockquote>Ruby 2.0’s new lazy enumerator feature seems like magic. In case you haven’t tried it yet, it allows you to iterate over an infinite series of values and take just the values you want. It brings the functional programming concept of lazy evaluation to Ruby – at least for enumerations.
</blockquote>


</p>

<h4><a href="https://www.gemlou.pe/" target="_blank">GemLou.pe: View the full dependency tree for any ruby gem.</a></h4>
<p>
<blockquote>Avoid bloat! Keep that Gemfile slim.

See how many dependencies a gem has *before* adding it to your project.</blockquote>
For instance, try the bookmarklet on the <a href="http://rubygems.org/gems/devise" target="_blank">devise gem</a>.
</p>

<h4><a href="http://www.ismytwitterpasswordsecure.com/" target="_blank">Is My Twitter Password Secure?</a></h4>
<p>
<blockquote>
It's a scary world right now, guys. Your Twitter password can cause the Dow Jones to drop nearly 150 points and compel dozens of blogs to write breathless posts about the future of online journalism. You should be worried.
<br><br>
In order to help everyone out a little, we've created an algorithm that will examine your password and tell you if it's secure enough. Spoiler alert: it isn't.
</blockquote>
</p>
