---
layout: article
title: ! 'What''s New in Ruby: November 2012 edition'
post_date: 2012-11-13 22:55:10.000000000 -06:00
---
Every month, <a href="http://meetup.com/kcruby">Kansas City Ruby</a> (#kcruby) reviews a subset of Peter Cooper's fantastic <a href="http://rubyweekly.com/?utm_source=databasically">Ruby Weekly</a> selections, along with other items picked up around the web.

<h4><a href="http://www.ruby-lang.org/en/news/2012/10/12/ruby-1-9-3-p286-is-released/" target="_blank">Ruby 1.9.3-p286 released</a></h4>
<p>The primary motivation was for fixing a couple of security vulnerabilities and a handful of bugs.</p>

<h4><a href="http://vimeo.com/51181496" target="_blank">A Whirlwind Tour of Rails 4</a></h4>
<p>Andy Lindeman presents a 40 minute tour of some of the forthcoming Rails 4's new features, including strong_parameters, Russian Doll caching, PATCH verb support, removal of Rails 2 finder syntax, and more.</p>

<h4><a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/" target="_blank">7 Patterns to Refactor Fat ActiveRecord Models</a></h4>
<p>Good ideas on how to break larger objects down into smaller ones.</p>

<h4><a href="http://blog.phusion.nl/2012/10/30/phusion-passenger-4-0-supports-jruby-rubinius" target="_blank">Phusion Passenger 4.0 supports JRuby, Rubinius</a></h4>
<p><blockquote>JRuby and Rubinius support real multi-core concurrency. JRuby and Rubinius threads map to real OS threads, and neither Ruby implementations have a global interpreter lock. In contrast, MRI Ruby 1.8 uses userspace threading and so cannot take advantage of multi-core using a single process. MRI Ruby 1.9 has real OS threads, but also has a global interpreter lock and so still cannot take advantage of multi-core using a single process.</blockquote></p>


<h4><a href="http://confreaks.com/videos/1233-aloharuby2012-refactoring-from-good-to-great" target="_blank">Refactoring from Good to Great</a></h4>
<p>

<blockquote>Most developers know enough about refactoring to write code that's pretty good. They create short methods, and classes with one responsibility. They're also familiar with a good handful of refactorings, and the code smells that motivate them.

This talk is about the next level of knowledge: the things advanced developers know that let them turn good code into great. Code that's easy to read and a breeze to change.</blockquote>

</p>

<h4><a href="https://github.com/jimweirich/rake/blob/next-major-release/doc/release_notes/rake-10.0.0.rdoc" target="_blank">Rake 10.0 released</a></h4>
<p>

<blockquote>Over the past several years I’ve been asked that question at conferences, panels and over twitter. Due to historical reasons (or maybe just plain laziness) Rake has (incorrectly) been treating the second digit of the version as the major release number. So in my head Rake was already at version 9.

Well, it’s time to fix things. This next version of Rake drops old, crufty, backwards compatibility hacks such as top level constants, DSL methods defined in Object and numerous other features that are just no longer desired. It’s also time to drop the leading zero from the version number as well and call this new version of rake what it really is: Version 10.

So, welcome to Rake 10.0!

Rake 10 is actually feature identical to the latest version of Rake 9 (that would be the version spelled 0.9.3), except that Rake 10 drops all the sundry deprecated features that have accumulated over the years.

If your Rakefile is up to date and current with all the new features of Rake 10, you are ready to go. If your Rakefile still uses a few deprecated feeatures, feel free to use Rake 9 (0.9.3) with the same feature set. Just be aware that future features will be in Rake 10 family line.</blockquote>

</p>

<h4><a href="" target="_blank"></a></h4>
<p></p>

<h4><a href="" target="_blank"></a></h4>
<p></p>

<h4><a href="" target="_blank"></a></h4>
<p></p>

<h4><a href="" target="_blank"></a></h4>
<p></p>
